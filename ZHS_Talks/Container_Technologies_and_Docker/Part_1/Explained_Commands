# DOCKER IMAGES #


--> Show current docker images:

  docker images ls


--> We can tag the images:

    docker tag $IMAGE_ID  (for example nokia/zhs:v1)


--> To pull or push images:

  docker pull $IMAGE_NAME (for example, nokia/zhs:v1)
  docker push $IMAGE_NAME


--> See the what includes image. We can see exactly the Dockerfile contents of image.

  docker inspect $IMAGE_NUMBER




##### CONTAINERS RUN-STOP-REMOVE #####


--> Run a container:

  docker container run -d --name $CONTAINER_NAME -p $HOST_PORT:$CONTAINER_PORT $IMAGE_NAME:$TAG
  docker container run -it --name $CONTAINER_NAME

    ( -it = "i" for interractive and "t" stands for TTY.)
    (Differences between -p and -P) (Differences between $HOST_PORT and $CONTAINER_PORT)



--> To see all containers(working + stopped)

  docker container ls -a


--> To see just running containers

  docker container ls


--> To see containers resource stats:

  docker container stats $CONTAINER_NAME "OR" $CONTAINER_ID

--> To see logs about specific container:

  docker logs $CONTAINER_ID OR $CONTAINER_NAME

--> To see detailed STDIN or STDOUT of containers:

  docker container attach $CONTAINER_ID "OR" $CONTAINER_NAME
  (search what does process consist of... STDIN, STDOUT, STDERR)


--> To run a command in the container, for the container:

  docker container exec -it $CONTAINER_ID "OR" $CONTAINER_NAME /bin/bash

      (In here our command is "/bin/bash". Thus enables us a command prompt. For example busybox container)


 --> We can pause, stop or start containers:

  docker container pause $CONTAINER_ID
  docker container unpause $CONTAINER_ID
  docker container stop  $CONTAINER_ID
  docker container start $CONTAINER_ID


 --> Remove container:

 (Before the remove stop the container)

  docker container stop $CONTAINER_ID "OR" $CONTAINER_NAME
  docker container rm -f $CONTAINER_ID "OR" $CONTAINER_NAME

 --> Remove "all" stopped containers:

  docker container stop $(docker ps -a -q)

            "OR"

  docker container prune

  NOTE= "-f" flag for force the CLI.

            "OR"

  docker container stop $(docker ps -a -q)
  docker container rm $(docker ps -a -q)


  #### OTHER BEST COMMAND LINES ####


   --> If we want to create new image from existing container''s changes, we need to commit from this container to create new image.
       Thus, we can create a new container easily from this new image. Note that again, we create this new container from old one with
       existing changes.


      # Commit old docker container.

          docker commit $CONTAINER_ID OR $CONTAINER_NAME $NEW_IMAGE_NAME

     # Run new container with new image.

          docker run ....

    (# If we want to add volume to the new container)

          docker run -it -v "$PWD/dir1":/dir1 -v "$PWD/dir2":/dir2 $NEW_IMAGE_NAME /bin/bash


   --> Clean all things...

      # Cleans up dangling images, containers, volumes, and networks (ie, not associated with a container)

          docker system prune

      # Additionally remove any stopped containers and all unused images (not just dangling images)

          docker system prune -a
